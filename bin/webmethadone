#!/usr/bin/env ruby

begin
  require 'rubygems'
rescue LoadError
  # no rubygems to load, so we fail silently
end

require 'optparse'
require File.dirname(__FILE__) + '/../lib/webmethadone'

#defaults
options = {
  :url => 'http://localhost:5555', 
  :service => 'webMethodsIntegrationServer_7.1', 
  :user => 'Administrator', 
  :password => 'manage',
  :timeout => 600
}

parser = OptionParser.new do |opts|
  opts.banner = "Usage: #{File.basename(__FILE__)} [options] [package]"
  opts.on("--start", "Starts webMethods Integration Server, or does nothing if its already started.") do 
    options[:action] = :start
  end
  opts.on("--stop", "Stops webMethods Integration Server, or does nothing if its already stopped.") do 
    options[:action] = :stop
  end  
  opts.on("--restart", "Restarts webMethods Integration Server.") do 
    options[:action] = :restart
  end  
  opts.on("--install", "Installs the given package.") do
    options[:action] = :install
  end
  opts.on("--delete", "Deletes the given package.") do
    options[:action] = :delete
  end
  opts.on("--disable", "Disables the given package.") do
    options[:action] = :disable
  end
  opts.on("--enable", "Enables the given package.") do
    options[:action] = :enable
  end  
  opts.on("--reload", "Reloads the given package.") do
    options[:action] = :reload
  end   
  opts.on("-l", "--url URL", "URL for connecting to a webMethods Integration Server. Default is 'http://localhost:5555'.") do |url|
    options[:url] = url
  end
  opts.on("-u", "--user USER", "USER to connect to the server with. Default is 'Administrator'.") do |user|
    options[:user] = user
  end
  opts.on("-p", "--password PASSWORD", "PASSWORD to connect to the server with. Default is 'manage'.") do |password|
    options[:password] = password
  end
  opts.on("-s", "--service SERVICE", "Integration Server windows SERVICE name, required when stopping, starting or restarting. Default is 'webMethodsIntegrationServer_7.1'.") do |service|
    options[:service] = service
  end
  opts.on("-t", "--timeout TIMEOUT", "How long to wait for an HTTP response from the server in seconds.  Default is 600 seconds (10 minutes).") do |timeout|
    options[:timeout] = timeout
  end 
  opts.on("-h", "--help", "Show this help") do
    options[:help] = true
  end  
end

begin
  parser.parse!
  if options[:help] or options[:action].nil?
    print parser
  else
    options[:package] = ARGV[0]
    server = WebMethadone::IntegrationServer.new(options[:url], options[:service], options[:user], options[:password], options[:timeout])
    server.send(options[:action], options[:package])
  end
end